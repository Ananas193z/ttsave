import logging
import re
import os
import pickle
import yt_dlp
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = '8052252656:AAFniHx8WCtCsC_k3F-SPKtWsw6KoWd_5f4'

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
channels = [
    'https://t.me/ggagahahajjx',
    'https://t.me/nqjajanannana',
    'https://t.me/akqlqlqlpqpq'
]
special_users_for_bot = {
    1651997919
}

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
try:
    with open("users.pkl", "rb") as file:
        users_category = pickle.load(file)
except FileNotFoundError:
    users_category = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
def add_user(user_point):
    if user_point not in users_category:
        users_category.append(user_point)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_point}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        save_users_file()
    else:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_point}' —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_users_file():
    with open("users.pkl", "wb") as file:
        pickle.dump(users_category, file)



for i in special_users_for_bot:
    if i in users_category:
        pass
    else:
        add_user(i)




# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
try:
    with open("polzovateliwas.pkl", "rb") as file:
        polzovateliwas_category = pickle.load(file)
except FileNotFoundError:
    polzovateliwas_category = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
def add_polzovateliwas(polzovateliwas_point):
    if polzovateliwas_point not in polzovateliwas_category:
        polzovateliwas_category.append(polzovateliwas_point)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{polzovateliwas_point}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        save_polzovateliwas_file()
    else:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{polzovateliwas_point}' —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_polzovateliwas_file():
    with open("polzovateliwas.pkl", "wb") as file:
        pickle.dump(polzovateliwas_category, file)














# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –∏–∑ TikTok
def download_tiktok_video(video_url, save_path='tiktok_videos'):
    if not os.path.exists(save_path):
        os.makedirs(save_path)

    ydl_opts = {
        'outtmpl': os.path.join(save_path, '%(id)s.%(ext)s'),
        'format': 'best',
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(video_url, download=True)
            filename = ydl.prepare_filename(info)
            return filename
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {str(e)}")
        return None












# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id

    if user_id in polzovateliwas_category:
        pass
    else:
        add_polzovateliwas(user_id)

    if user_id in users_category:
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ üîóTikToküîó, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.‚¨áÔ∏è")
    else:
        markup = InlineKeyboardMarkup()
        for i in channels:
            match = re.search(r'https://t\.me/([A-Za-z0-9_]+)', i)
            if match:
                channel_username = match.group(1)
                subscribe_button = InlineKeyboardButton(channel_username, url=i)
                markup.add(subscribe_button)
        done_button = InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="subscription_check_but_pressed")
        markup.add(done_button)
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=markup)





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
@dp.callback_query_handler(lambda c: c.data == 'subscription_check_but_pressed')
async def check_subs(callback: CallbackQuery):
    user_id = callback.from_user.id
    not_subscribed_channels = []

    for i in channels:
        match = re.search(r'https://t\.me/([A-Za-z0-9_]+)', i)
        if match:
            channel_username = match.group(1)
            try:
                user_channel_status = await bot.get_chat_member(chat_id=f'@{channel_username}', user_id=user_id)
                logging.info(f"User ID: {user_id} - Status in channel @{channel_username}: {user_channel_status.status}")

                if user_channel_status.status == 'left':
                    not_subscribed_channels.append(channel_username)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                await callback.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
                return

    if not_subscribed_channels:
        if len(not_subscribed_channels) == len(channels):
            await callback.answer('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∏–∑ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.')
        else:
            await callback.answer(f'–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã: {", ".join(not_subscribed_channels)}.')
    else:
        add_user(user_id)
        await callback.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã! ‚úÖ')
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        await bot.send_message(callback.message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ üîóTikToküîó , –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.‚¨áÔ∏è')













# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ)
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_video_download(message: types.Message):
    user_id = message.from_user.id

    if user_id in users_category:
        url = message.text.strip()
        if "tiktok.com" not in url:
            await message.reply("üîó–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É TikToküîó\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.üîÑ")
            return

        try:
            print(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {url}")
            await bot.send_message(message.chat.id, 'üîÑ–°–∫–∞—á–∏–≤–∞—é...üîÑ')
            filename = download_tiktok_video(url)
            
            if filename:
                print(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {filename}")
                with open(filename, "rb") as video_file:
                    await bot.send_video(message.chat.id, video=video_file, caption="–í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞! ‚úÖ")
                print("–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                os.remove(filename)
                print(f"–§–∞–π–ª {filename} —É–¥–∞–ª—ë–Ω.")
            else:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    else:
        await message.reply("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª—ã, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
